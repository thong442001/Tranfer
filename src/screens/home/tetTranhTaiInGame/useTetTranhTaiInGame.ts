import { useEffect, useState } from 'react';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { LiXiVangRoutes } from '../../../navigations/HomeNavigation';
import firestore from '@react-native-firebase/firestore';
import {
  Alert,
} from 'react-native';
import { useSelector } from "react-redux";
import database from "@react-native-firebase/database";
type UseTetTranhTaiInGameProps = NativeStackScreenProps<LiXiVangRoutes, 'TetTranhTaiInGame'>;

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho state `data`
interface TetTranhTaiInGameData {
  btn_back?: string;
  backGround?: string;
  backGround1?: string;
  backGround2?: string;
  avt1?: string;
  avt2?: string;
  img_vs?: string;
  title?: string;
}

export const useTetTranhTaiInGame = ({ route, navigation }: UseTetTranhTaiInGameProps) => {
  const { params } = route as { params: { game: string; roomId: string } };
  const user = useSelector((state: any) => state.app.user); // L·∫•y th√¥ng tin user hi·ªán t·∫°i

  const [data, setData] = useState<TetTranhTaiInGameData | null>(null);
  const [score, setScoreState] = useState<number>(0);
  const [score2, setScore2] = useState<number>(0); // ƒêi·ªÉm s·ªë c·ªßa ƒë·ªëi th·ªß
  const [player1Name, setPlayer1Name] = useState<string>(''); // T√™n c·ªßa ch√≠nh m√¨nh
  const [player2Name, setPlayer2Name] = useState<string>(''); // T√™n c·ªßa ƒë·ªëi th·ªß
  const [winner, setWinner] = useState<string | null>(null);

  // Firebase collection reference
  const fb = firestore().collection('Tranfer-PageTetTranhTaiInGame');
  const roomRef = database().ref(`matchmaking/${params.game}/${params.roomId}`);
  let isPlayer1 = true; // M·∫∑c ƒë·ªãnh user l√† player1

  useEffect(() => {
    let title = params.game === 'ThuTaiBanVit'
      ? 'TH·ª¨ T√ÄI B·∫ÆN V√çT'
      : params.game === 'ThanhAnhKim'
        ? 'TH√ÅNH √ÅNH KIM'
        : 'ANH H√ôNG SI√äU B·∫¢O V·ªÜ';

    const unsubscribe = fb.onSnapshot(querySnapshot => {
      querySnapshot.forEach(doc => {
        setData({
          btn_back: doc.data()?.btn_back,
          backGround: doc.data()?.backGround,
          backGround1: doc.data()?.backGround1,
          backGround2: doc.data()?.backGround2,
          avt1: doc.data()?.avt1,
          avt2: doc.data()?.avt2,
          img_vs: doc.data()?.img_vs,
          title: title,
        });
      });
    });

    // L·∫Øng nghe d·ªØ li·ªáu ph√≤ng (score v√† t√™n c·ªßa 2 ng∆∞·ªùi ch∆°i)
    const listener = roomRef.on("value", (snapshot) => {
      if (snapshot.exists()) {

        if (!snapshot.exists()) {
          Alert.alert("ƒê·ªëi th·ªß ƒë√£ tho√°t", "B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v·ªÅ trang ch·ªß", [
            { text: "OK", onPress: () => navigation.navigate("LiXiVang") },
          ]);
          return;
        }

        const roomData = snapshot.val();

        const { player1, player2 } = roomData;
        if (!player1 || !player2) {
          // N·∫øu ƒë·ªëi th·ªß tho√°t, cho user c√≤n l·∫°i th·∫Øng ngay l·∫≠p t·ª©c
          Alert.alert("B·∫°n th·∫Øng!", "ƒê·ªëi th·ªß ƒë√£ r·ªùi kh·ªèi tr·∫≠n ƒë·∫•u.", [
            { text: "OK", onPress: () => handleWinByDefault() },
          ]);
        }


        // Ki·ªÉm tra n·∫øu user l√† player2, ta ho√°n ƒë·ªïi
        if (player2.id === user?.uid) {
          isPlayer1 = false;
          setScoreState(player2.score || 0);
          setScore2(player1.score || 0);
          setPlayer1Name(player2.name || "B·∫°n");
          setPlayer2Name(player1.name || "ƒê·ªëi th·ªß");
        } else {
          isPlayer1 = true;
          setScoreState(player1.score || 0);
          setScore2(player2.score || 0);
          setPlayer1Name(player1.name || "B·∫°n");
          setPlayer2Name(player2.name || "ƒê·ªëi th·ªß");
        }


      }
    });

    return () => {
      unsubscribe();
      roomRef.off("value", listener);
    };
  }, []);

  const handleLeaveGame = async () => {
    if (!user?.uid) return;

    const snapshot = await roomRef.once("value");
    if (!snapshot.exists()) return;

    const roomData = snapshot.val();
    const isPlayer1 = roomData.player1?.id === user.uid;
    const playerKey = isPlayer1 ? "player1" : "player2";

    // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
    await roomRef.child(playerKey).remove();

    // N·∫øu ph√≤ng tr·ªëng -> x√≥a lu√¥n
    const updatedRoom = await roomRef.once("value");
    if (!updatedRoom.val()?.player1 && !updatedRoom.val()?.player2) {
      await roomRef.remove();
    }

    navigation.navigate("LiXiVang"); // Quay v·ªÅ trang ch·ªß
  };


  const toBangXepHang = () => {
    navigation.getParent()?.navigate("LiXiVangHomeNavigation", { screen: "BangXepHang" });
  };

  const handleTimeEnd = async () => {
    let winnerId: "player1" | "player2" | null = null;
    let isDraw = false;

    if (score > score2) {
      winnerId = "player1";
    } else if (score < score2) {
      winnerId = "player2";
    } else {
      isDraw = true; // Tr∆∞·ªùng h·ª£p h√≤a
    }

    setWinner(winnerId);

    await roomRef.update({ status: "finished" });

    if (isDraw) {
      await giveWinnerLiXi("player1");
      await giveWinnerLiXi("player2");
    } else if (winnerId) {
      await giveWinnerLiXi(winnerId);
    }

    Alert.alert(
      isDraw ? "H√≤a" : winnerId === "player1" ? `${player1Name} th·∫Øng!` : `${player2Name} th·∫Øng!`,
      `ƒêi·ªÉm s·ªë: ${score} - ${score2}`,
      [{ text: "OK", onPress: () => toBangXepHang() }]
    );
  };

  const giveWinnerLiXi = async (winner: "player1" | "player2") => {
    const snapshot = await roomRef.once("value");
    if (!snapshot.exists()) return;

    const roomData = snapshot.val();
    const winnerUid = roomData[winner]?.id;

    if (winnerUid) {
      const userRef = database().ref(`Tranfer-users/${winnerUid}/li_xi`);
      userRef.transaction((currentLiXi) => (currentLiXi || 0) + 1);
    }
  };

  // üî• H√†m c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë v√†o Firebase
  const setScore = async (newScore: number) => {
    setScoreState(newScore);
    await roomRef.child(`player${isPlayer1 ? "1" : "2"}`).update({ score: newScore });
  };

  const handleWinByDefault = async () => {
    await roomRef.update({ status: "finished" });

    // Ng∆∞·ªùi ch∆°i c√≤n l·∫°i l√† ng∆∞·ªùi th·∫Øng
    const winner = isPlayer1 ? "player1" : "player2";
    await giveWinnerLiXi(winner);

    toBangXepHang()
  };


  return {
    data,
    score,
    setScore,
    score2,
    player1Name,
    player2Name,
    handleTimeEnd,
    winner,
    handleLeaveGame
  };
};
